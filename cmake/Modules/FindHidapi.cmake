# - find Hidapi
# HIDAPI_INCLUDE_DIR - Where to find Hidapi header files (directory)
# HIDAPI_LIBRARIES - Hidapi libraries
# HIDAPI_LIBRARY_RELEASE - Where the release library is
# HIDAPI_LIBRARY_DEBUG - Where the debug library is
# HIDAPI_FOUND - Set to TRUE if we found everything (library, includes and executable)

# Copyright (c) 2010 Pau Garcia i Quiles, <pgquiles@elpauer.org>
#
# Redistribution and use is allowed according to the terms of the BSD license.
# For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#
# Generated by CModuler, a CMake Module Generator - http://gitorious.org/cmoduler

IF( HIDAPI_INCLUDE_DIR AND HIDAPI_LIBRARY_RELEASE AND HIDAPI_LIBRARY_DEBUG )
	SET(HIDAPI_FIND_QUIETLY TRUE)
ENDIF( HIDAPI_INCLUDE_DIR AND HIDAPI_LIBRARY_RELEASE AND HIDAPI_LIBRARY_DEBUG )

FIND_PATH( HIDAPI_INCLUDE_DIR hidapi/hidapi.h )

FIND_LIBRARY(HIDAPI_LIBRARY_RELEASE NAMES hidapi )

FIND_LIBRARY(HIDAPI_LIBRARY_DEBUG NAMES hidapi hidapi  HINTS /usr/lib/debug/usr/lib/ )

IF( HIDAPI_LIBRARY_RELEASE OR HIDAPI_LIBRARY_DEBUG AND HIDAPI_INCLUDE_DIR )
	SET( HIDAPI_FOUND TRUE )
ENDIF( HIDAPI_LIBRARY_RELEASE OR HIDAPI_LIBRARY_DEBUG AND HIDAPI_INCLUDE_DIR )

IF( HIDAPI_LIBRARY_DEBUG AND HIDAPI_LIBRARY_RELEASE )
	# if the generator supports configuration types then set
	# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value
	IF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		SET( HIDAPI_LIBRARIES optimized ${HIDAPI_LIBRARY_RELEASE} debug ${HIDAPI_LIBRARY_DEBUG} )
	ELSE( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
		# if there are no configuration types and CMAKE_BUILD_TYPE has no value
		# then just use the release libraries
		SET( HIDAPI_LIBRARIES ${HIDAPI_LIBRARY_RELEASE} )
	ENDIF( CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE )
ELSEIF( HIDAPI_LIBRARY_RELEASE )
	SET( HIDAPI_LIBRARIES ${HIDAPI_LIBRARY_RELEASE} )
ELSE( HIDAPI_LIBRARY_DEBUG AND HIDAPI_LIBRARY_RELEASE )
	SET( HIDAPI_LIBRARIES ${HIDAPI_LIBRARY_DEBUG} )
ENDIF( HIDAPI_LIBRARY_DEBUG AND HIDAPI_LIBRARY_RELEASE )

IF( HIDAPI_FOUND )
	IF( NOT HIDAPI_FIND_QUIETLY )
		MESSAGE( STATUS "Found Hidapi header file in ${HIDAPI_INCLUDE_DIR}")
		MESSAGE( STATUS "Found Hidapi libraries: ${HIDAPI_LIBRARIES}")
	ENDIF( NOT HIDAPI_FIND_QUIETLY )
ELSE(HIDAPI_FOUND)
	IF( HIDAPI_FIND_REQUIRED)
		MESSAGE( FATAL_ERROR "Could not find Hidapi" )
	ELSE( HIDAPI_FIND_REQUIRED)
		MESSAGE( STATUS "Optional package Hidapi was not found" )
	ENDIF( HIDAPI_FIND_REQUIRED)
ENDIF(HIDAPI_FOUND)

